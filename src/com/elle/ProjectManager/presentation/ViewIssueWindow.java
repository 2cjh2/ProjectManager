/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.elle.ProjectManager.presentation;

import com.elle.ProjectManager.database.ModifiedData;
import com.elle.ProjectManager.database.ModifiedTableData;
import com.elle.ProjectManager.logic.EditableData;
import com.elle.ProjectManager.logic.IssueInView;
import com.elle.ProjectManager.logic.ShortCutSetting;
import com.elle.ProjectManager.logic.Tab;
import com.elle.ProjectManager.presentation.ProjectManagerWindow;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;

/**
 *
 * @author fuxiaoqian
 */
public class ViewIssueWindow extends JFrame {

    // components
    private ProjectManagerWindow projectManager;
    private IssueInView issueInView;

    private Map<String, JTextComponent> textComponentsList;
    private String[] inViewIssueColumnNames;
    private JTable Table;
    private Tab Tab;
    private int rowNumInModel;

    //feature
    private ShortCutSetting ShortCutSetting;

    // boolean trigger
    private boolean contentChanged;

    /**
     * Creates new form ViewIssueWindow
     */
    public ViewIssueWindow(IssueInView IssueInTable) {
        projectManager = ProjectManagerWindow.getInstance();

        initComponents();

        issueInView = IssueInTable;

        //initial parameters table, row number...
        initVariables();

        //initial issueWindow text components' content and listener
        initIssueWindow();

        this.setTitle("view issue in " + Table.getName());

        this.setPreferredSize(new Dimension(600, 750));

        // set view issue window location in screen
        Point pmWindowLocation = projectManager.getLocationOnScreen(); //get the project manager window in screen
        int numWindow = projectManager.getOpenningIssuesList().size();
        System.out.println("now number of opened window is: " + numWindow);
        int x = pmWindowLocation.x - 150;
        int y = pmWindowLocation.y - 120;
        this.setLocation(x + numWindow * 30, y + numWindow * 15); // set location of view issue window depend on how many window open

        this.pack();
    }

    private void initVariables() {
        idLabel.setText(Integer.toString(issueInView.getID())); // set idLabel content
        // if we do nothing about the text components' content, it stays false
        contentChanged = false;
        Table = issueInView.getSelectedTable();
        Tab = projectManager.getSelectedTab();
        inViewIssueColumnNames = issueInView.getSelectedIssueColumnNames();
        rowNumInModel = getIssueRowInTableModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        formPane = new javax.swing.JPanel();
        app = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        id = new javax.swing.JLabel();
        programmer = new javax.swing.JLabel();
        rk = new javax.swing.JLabel();
        dateOpened = new javax.swing.JLabel();
        dateOpenedText = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        buttonCancel = new javax.swing.JButton();
        dateClosed = new javax.swing.JLabel();
        version = new javax.swing.JLabel();
        buttonConfirm = new javax.swing.JButton();
        dateClosedText = new javax.swing.JTextField();
        versionText = new javax.swing.JTextField();
        btnCloseIssue = new javax.swing.JButton();
        titleText = new javax.swing.JTextField();
        description = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        BtnNext = new javax.swing.JButton();
        BtnPrevious = new javax.swing.JButton();
        appText = new javax.swing.JTextField();
        programmerText = new javax.swing.JTextField();
        rkText = new javax.swing.JTextField();
        lock = new javax.swing.JLabel();
        checkbox1 = new java.awt.Checkbox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        app.setText(" app");

        title.setText(" title");

        id.setText(" id");

        programmer.setText(" programmer");

        rk.setText(" rk");

        dateOpened.setText(" dateOpened");

        dateOpenedText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        dateOpenedText.setMargin(new java.awt.Insets(-1, -1, -1, -1));
        dateOpenedText.setName("dateOpened"); // NOI18N
        dateOpenedText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateOpenedTextActionPerformed(evt);
            }
        });
        dateOpenedText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateOpenedTextKeyReleased(evt);
            }
        });

        descriptionText.setColumns(20);
        descriptionText.setLineWrap(true);
        descriptionText.setRows(5);
        descriptionText.setWrapStyleWord(true);
        descriptionText.setName("description"); // NOI18N
        descriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                descriptionTextKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(descriptionText);

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        dateClosed.setText(" dateClosed");

        version.setText(" version");

        buttonConfirm.setText("Confirm");
        buttonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmActionPerformed(evt);
            }
        });

        dateClosedText.setName("dateClosed"); // NOI18N
        dateClosedText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateClosedTextActionPerformed(evt);
            }
        });
        dateClosedText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateClosedTextKeyReleased(evt);
            }
        });

        versionText.setName("version"); // NOI18N

        btnCloseIssue.setText("Close Issue");
        btnCloseIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseIssueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buttonConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancel)
                .addGap(4, 4, 4))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addComponent(btnCloseIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateClosedText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateClosed))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(versionText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(version)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateClosed)
                    .addComponent(version))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateClosedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(versionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCloseIssue))
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonConfirm)))
        );

        titleText.setName("title"); // NOI18N
        titleText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTextActionPerformed(evt);
            }
        });

        description.setText(" description");

        idLabel.setText("jLabel1");

        BtnNext.setText(">");
        BtnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnNextActionPerformed(evt);
            }
        });

        BtnPrevious.setText("<");
        BtnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPreviousActionPerformed(evt);
            }
        });

        appText.setName("app"); // NOI18N

        programmerText.setName("programmer"); // NOI18N

        rkText.setName("rk"); // NOI18N
        rkText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rkTextActionPerformed(evt);
            }
        });

        lock.setText("lock");

        checkbox1.setLabel("checkbox1");

        javax.swing.GroupLayout formPaneLayout = new javax.swing.GroupLayout(formPane);
        formPane.setLayout(formPaneLayout);
        formPaneLayout.setHorizontalGroup(
            formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPaneLayout.createSequentialGroup()
                        .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleText)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formPaneLayout.createSequentialGroup()
                                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(formPaneLayout.createSequentialGroup()
                                        .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(id)
                                            .addComponent(lock))
                                        .addGap(19, 19, 19)
                                        .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(idLabel))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateOpened)
                                    .addComponent(dateOpenedText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(programmer)
                                    .addComponent(programmerText, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rk, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rkText, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formPaneLayout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                            .addGroup(formPaneLayout.createSequentialGroup()
                                .addComponent(description)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BtnPrevious)
                                .addGap(18, 18, 18)
                                .addComponent(BtnNext)))
                        .addContainerGap())
                    .addGroup(formPaneLayout.createSequentialGroup()
                        .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(app)
                            .addComponent(appText, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6))))
        );
        formPaneLayout.setVerticalGroup(
            formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPaneLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(programmer, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(dateOpened, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                    .addComponent(rk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateOpenedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(programmerText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rkText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(formPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lock))))
                .addGap(2, 2, 2)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnNext)
                    .addComponent(BtnPrevious))
                .addGap(0, 0, 0)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(formPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPaneLayout.createSequentialGroup()
                        .addComponent(app)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 44, Short.MAX_VALUE))
        );

        scrollPane.setViewportView(formPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dateOpenedTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateOpenedTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateOpenedTextActionPerformed

    private void dateOpenedTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateOpenedTextKeyReleased
        if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_D) {
            FillItWithDate((JTextField) evt.getComponent());
        }
    }//GEN-LAST:event_dateOpenedTextKeyReleased

    private void FillItWithDate(JTextField dateArea) {

        dateArea.requestFocusInWindow();
        dateArea.selectAll();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String today = dateFormat.format(date);
        dateArea.setText(today);
    }

    private void descriptionTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionTextKeyReleased
        JTextArea dateArea = (JTextArea) evt.getComponent();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String today = dateFormat.format(date);
        String value = dateArea.getText();
        if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_D) {
            dateArea.requestFocusInWindow();
            dateArea.selectAll();
            value = value + " " + today;
            dateArea.setText(value);
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_N) {

            int pos = dateArea.getCaretPosition();
            String userName = projectManager.getUserName();
            String message = "\n" + "-- by " + userName + " on " + today + "-- \n";
            //String value1 = value.substring(0, pos) + message + value.substring(pos, value.length());
            dateArea.insert(message, pos);

            dateArea.setCaretPosition(pos + 31);

        }
    }//GEN-LAST:event_descriptionTextKeyReleased

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        
        projectManager.getOpenningIssuesList().remove((Integer) issueInView.getID(), this);
        formWindowClosing();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmActionPerformed

        if (contentChanged) {
            confirm();
        }
        formWindowClosing();
    }//GEN-LAST:event_buttonConfirmActionPerformed

    private void confirm() {

        ModifiedTableData data = Tab.getTableData();
        for (int col = 0; col < inViewIssueColumnNames.length; col++) {
//            System.out.println(issueInView.getIssueValueDataAt(col).isValueChanged());
            if (issueInView.getIssueValueDataAt(col).isValueChanged()) {
                data.getNewData().add(new ModifiedData(Table.getName(),
                        Table.getColumnName(col), issueInView.getIssueValueAt(col),
                        (int) issueInView.getID()));
            }
        }
//        Table.setValueAt();
        projectManager.uploadChanges(Table.getName());

        projectManager.makeTableEditable(false);
    }

    private void dateClosedTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateClosedTextActionPerformed

    }//GEN-LAST:event_dateClosedTextActionPerformed

    private void dateClosedTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateClosedTextKeyReleased
        if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_D) {
            FillItWithDate((JTextField) evt.getComponent());
        }
    }//GEN-LAST:event_dateClosedTextKeyReleased

    private void btnCloseIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseIssueActionPerformed

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String today = dateFormat.format(date);
        String userName = projectManager.getUserName();
        String value = descriptionText.getText();
        if (btnCloseIssue.getText().equalsIgnoreCase("close issue")) {
            // set dateClosed text field with date today
            FillItWithDate(dateClosedText);
            String temperaryVersion = "XXX";
            versionText.setText(temperaryVersion);
            btnCloseIssue.setText("Reopen Issue");
            value = value + "\n--- Issue Closed by "
                    + userName + " on " + today + "\n";
        } else if (btnCloseIssue.getText().equalsIgnoreCase("reopen issue")) {
            value = value + "\n \n--- Issue reopened by "
                    + userName + " on " + today + " (version " + versionText.getText() + ") \n";
            versionText.setText("");
            dateClosedText.setText("");
            btnCloseIssue.setText("Close Issue");
        }
        descriptionText.setText(value);
    }//GEN-LAST:event_btnCloseIssueActionPerformed

    private void titleTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleTextActionPerformed

    private void BtnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnNextActionPerformed
        
        if (issueInView.getSelectedRowInTable() == Table.getRowCount()-1) {
            JOptionPane.showMessageDialog(this, "This is the last row!");
        } else {
//            if (contentChanged) {
//                confirm();
//            }

            int newRow = issueInView.getSelectedRowInTable() + 1;
            showNextIssue(newRow);

        }
    }//GEN-LAST:event_BtnNextActionPerformed

    private void BtnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPreviousActionPerformed

        if (issueInView.getSelectedRowInTable() == 0) {
            JOptionPane.showMessageDialog(this, "This is the first row!");
        } else {
            if (contentChanged) {
                confirm();
            }

            int newRow = issueInView.getSelectedRowInTable() - 1;
            showNextIssue(newRow);

        }
//        if (rowInView == 0) {
//            JOptionPane.showMessageDialog(this, "This is the first row!");
//        } else {
//            if (contentChanged) {
//                for (int col = 0; col < formValues.length; col++) {
//                    if (formValues[col] != null) {
//
//                        selectedTable.setValueAt(formValues[col], rowInView, col + 1);
//                    }
//                }
//                projectManager.uploadChanges(getIssueActiveTabName());
//            }
//            //            System.out.println(projectManager.getSelectedTable().getValueAt(rowInView-1, 2));
//
//            projectManager.deleteNumOfAddIssueWindowOpened();
//            //            this.dispose();
//            projectManager.deleteFromIdNumOfOpenningIssues(rowInView, selectedTable);
//            rowInView = rowInView - 1;
//            projectManager.viewNextIssue(rowInView, columnFocused, selectedTable);
//            updateForm();
//            selectedTable.setRowSelectionInterval(rowInView, rowInView);
//        }
    }//GEN-LAST:event_BtnPreviousActionPerformed

    private void showNextIssue(int newRow) {

        projectManager.getOpenningIssuesList().remove(issueInView.getID(), this);

        int newCol = issueInView.getSelectedColumnInTable();
        Tab newTab = projectManager.getTabs().get(issueInView.getTabName());
        String newTabName = issueInView.getTabName();

        issueInView = new IssueInView(newRow, newCol, newTab, newTabName);

//        System.out.println("new issue is: " + newRow + " " + newCol + " "
//                + newTabName + " " + issueInView.getID());

        //reinitial parameters table, row number...
        initVariables();
        //reinitial issueWindow text components' content and listener
        updateIssueWindow();

        projectManager.getOpenningIssuesList().put(issueInView.getID(), this);

        issueInView.getSelectedTable().setRowSelectionInterval(newRow, newRow);
    }

    private void updateIssueWindow() {
        for (int i = 1; i < inViewIssueColumnNames.length; i++) {
            switch (inViewIssueColumnNames[i].toLowerCase()) {
                case "app":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        appText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        appText.setText("");
                    }// set app textfield with the content in app column in view issue
                    break;
                case "title":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        titleText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        titleText.setText("");
                    }
                    break;
                case "description":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        descriptionText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        descriptionText.setText("");
                    }
                    break;
                case "programmer":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        programmerText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        programmerText.setText("");
                    }
                    break;
                case "dateOpened":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        dateOpenedText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        dateOpenedText.setText("");
                    }
                case "rk":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        rkText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        rkText.setText("");
                    }
                    break;

                case "version":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        versionText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        versionText.setText("");
                    }
                case "dateClosed":
                    System.out.println(issueInView.getIssueValueAt(i));
                    if (issueInView.getIssueValueAt(i) != null) {
                        dateClosedText.setText(issueInView.getIssueValueAt(i).toString());
                    }else{
                        dateClosedText.setText("");
                    }
                    break;
                default:
                    break;
            }
            issueInView.getIssueValueDataAt(inViewIssueColumnNames[i]).setIsValueChanged(false);
        }
        this.contentChanged = false;
    }

    private void rkTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rkTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rkTextActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        formWindowClosing();
        System.out.println("window closing!");
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosing() {
        projectManager.getOpenningIssuesList().remove((Integer) issueInView.getID(), this);
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnNext;
    private javax.swing.JButton BtnPrevious;
    private javax.swing.JLabel app;
    private javax.swing.JTextField appText;
    private javax.swing.JButton btnCloseIssue;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonConfirm;
    private java.awt.Checkbox checkbox1;
    private javax.swing.JLabel dateClosed;
    private javax.swing.JTextField dateClosedText;
    private javax.swing.JLabel dateOpened;
    private javax.swing.JTextField dateOpenedText;
    private javax.swing.JLabel description;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JPanel formPane;
    private javax.swing.JLabel id;
    private javax.swing.JLabel idLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lock;
    private javax.swing.JLabel programmer;
    private javax.swing.JTextField programmerText;
    private javax.swing.JLabel rk;
    private javax.swing.JTextField rkText;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel title;
    private javax.swing.JTextField titleText;
    private javax.swing.JLabel version;
    private javax.swing.JTextField versionText;
    // End of variables declaration//GEN-END:variables

    private void initIssueWindow() {
        textComponentsList = new HashMap<String, JTextComponent>();
        inViewIssueColumnNames = this.issueInView.getSelectedIssueColumnNames();

        InputMap ip = null;
        for (int i = 1; i < inViewIssueColumnNames.length; i++) {
            switch (inViewIssueColumnNames[i]) {
                case "app":
                    if (issueInView.getIssueValueAt(i) != null) {
                        appText.setText(issueInView.getIssueValueAt(i).toString());
                    }// set app textfield with the content in app column in view issue
                    textComponentsList.put(inViewIssueColumnNames[i], appText); // add app text field to textcomponentlist
                    ip = appText.getInputMap(); //add undo and copy and paste feature
                    ShortCutSetting.undoAndRedoShortCut(appText);
                    break;
                case "title":
                    if (issueInView.getIssueValueAt(i) != null) {
                        titleText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], titleText);
                    ip = titleText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(titleText);
                    break;
                case "description":
                    if (issueInView.getIssueValueAt(i) != null) {
                        descriptionText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], descriptionText);
                    ip = descriptionText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(descriptionText);
                    break;
                case "programmer":
                    if (issueInView.getIssueValueAt(i) != null) {
                        programmerText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], programmerText);
                    ip = programmerText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(programmerText);
                    break;
                case "dateOpened":
                    if (issueInView.getIssueValueAt(i) != null) {
                        dateOpenedText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], dateOpenedText);
                    ip = dateOpenedText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(dateOpenedText);
                    break;
                case "rk":
                    if (issueInView.getIssueValueAt(i) != null) {
                        rkText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], rkText);
                    ip = rkText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(rkText);
                    break;
                case "version":
                    if (issueInView.getIssueValueAt(i) != null) {
                        versionText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], versionText);
                    ip = versionText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(versionText);
                    break;
                case "dateClosed":
                    if (issueInView.getIssueValueAt(i) != null) {
                        dateClosedText.setText(issueInView.getIssueValueAt(i).toString());
                    }
                    textComponentsList.put(inViewIssueColumnNames[i], dateClosedText);
                    ip = dateClosedText.getInputMap();
                    ShortCutSetting.undoAndRedoShortCut(dateClosedText);
                    break;
                default:
                    break;
            }

            ShortCutSetting.copyAndPasteShortCut(ip);
        }
        //add document listener to all text components in this window
        setDocumentListener();
        //add action listener to all text components and using tab to transfer 
        // all text area except description
        setTabKeyTransferFocusBtwTextArea();

        //set close issue btn property
        if (dateClosedText.getText().isEmpty() || versionText.getText().isEmpty()) {
            btnCloseIssue.setText("Close Issue");
        } else {
            btnCloseIssue.setText("Reopen Issue");
        }
    }

    private void setDocumentListener() {
        DocumentListener textDocumentLis = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                contentChanged = true;
                Document doc = e.getDocument();
                String columnName = (String) doc.getProperty("id");
                Object newValue = textComponentsList.get(columnName).getText();

//                System.out.println("here " + doc.getProperty("id") + " " + newValue);
                issueInView.getIssueValueDataAt(columnName).setValue(newValue);

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                contentChanged = true;
                Document doc = e.getDocument();
                String columnName = (String) doc.getProperty("id");
                Object newValue = textComponentsList.get(columnName).getText();
                issueInView.getIssueValueDataAt(columnName).setValue(newValue);
//                System.out.println(doc.getProperty("id") + " " + newValue);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }

        };
        for (int i = 1; i < inViewIssueColumnNames.length; i++) {
            String columnName = inViewIssueColumnNames[i];
            Document doc = textComponentsList.get(columnName).getDocument();
            doc.addDocumentListener(textDocumentLis);
            doc.putProperty("id", columnName);
        }
    }

    private void setTabKeyTransferFocusBtwTextArea() {
        AbstractAction transferFocus = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ((Component) e.getSource()).transferFocus();
            }
        };

        for (int i = 1; i < inViewIssueColumnNames.length; i++) {
            if (!inViewIssueColumnNames[i].equals("description")) {
                textComponentsList.get(inViewIssueColumnNames[i]).getInputMap().
                        put(KeyStroke.getKeyStroke("TAB"), "transferFocus");
                textComponentsList.get(inViewIssueColumnNames[i]).getActionMap().
                        put("transferFocus", transferFocus);
            }
        }
    }

    private int getIssueRowInTableModel() {
        for (int i = 0; i < Table.getModel().getRowCount(); i++) {
            if ((int) Table.getModel().getValueAt(i, 0) == issueInView.getID()) {
                return i;
            }
        }
        System.out.println("can not find this issue in Model!");
        return -1;
    }
}
