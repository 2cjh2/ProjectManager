/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectmanager_gui;

import java.sql.*;

import java.text.SimpleDateFormat;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.text.AbstractDocument;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.RowFilter;
//import com.ezware.oxbow.swingbits.table.filter.TableRowFilterSupport;
//import elle_GUI.CreateDocumentFilter;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Tina & Louis W.
 */
public class ProjectManager extends javax.swing.JFrame {
    
    // Attributes
    public TableState tasks = new TableState();
    public TableState task_files = new TableState();
    public TableState task_notes = new TableState();
    public EnterButton enterButton = new EnterButton();
    public LogWindow logwind = new LogWindow();
    protected static boolean isFiltering = true;
    private ArrayList changedCell = new ArrayList();    // record the locations of changed cell
    
    // though Vector is obsolete, it is used and required by table model
//    public Vector columnNames1 = new Vector(); // column names for table1
//    public Vector columnNames2 = new Vector();
//    public Vector data1 = new Vector();    // data for table1
//    public Vector data2 = new Vector();    // data for table2

//    public TableRowSorter sorter1;         // sorter for table1
//    public TableRowSorter sorter2;         // sorter for table2
//    public long table1Rows = 0;
//    public long table2Rows = 0;
//    public long table1Records = 0;
//    public long table2Records = 0;
      

//    protected static String jdbc_driver;
//    protected static Connection conn;
    /**
     * Creates new form Analyster
     */
    public ProjectManager() {
        initComponents();
        text.setVisible(false);

        // set the interface to the middle of the window
        this.setLocationRelativeTo(null);

        this.setTitle("Project Manager");
        
        // When Initiating the ProjectManager, before choosing Swich Button, we set some buttons invisible.
        btnUploadChange.setVisible(false);
        btnEnter.setVisible(false);
        btnCancelSQL.setVisible(false);
        btnCancelEdit.setVisible(false);
        btnBatchEdit.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addPanel_control = new javax.swing.JPanel();
        btnReload = new javax.swing.JButton();
        textForSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        numOfRecords1 = new javax.swing.JLabel();
        numOfRecords2 = new javax.swing.JLabel();
        jField = new javax.swing.JComboBox();
        jTime = new javax.swing.JLabel();
        numOfRecords3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btnUploadChange = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTasks = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableTask_Files = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTask_Notes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnEditModeSwitch = new javax.swing.JButton();
        jLabelEdit = new javax.swing.JLabel();
        btnCancelEdit = new javax.swing.JButton();
        btnBatchEdit = new javax.swing.JButton();
        btnAddRecord = new javax.swing.JButton();
        btnAddFile = new javax.swing.JButton();
        btnAddNote = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        btnEnter = new javax.swing.JButton();
        btnCancelSQL = new javax.swing.JButton();
        btnDebugMode = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelDebug = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemVersion = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        menuItemAWS = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        menuItemPrintGUI = new javax.swing.JMenuItem();
        menuItemPrintDisplayWindow = new javax.swing.JMenuItem();
        menuItemSaveFile = new javax.swing.JMenuItem();
        menuItemLogOff = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        menuItemManageDB = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        menuItemLog = new javax.swing.JMenuItem();
        menuItemSQLCommand = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        menuItemReportBug = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addPanel_control.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnReload.setText("Reload");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        textForSearch.setText("Enter name");
        textForSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textForSearchMouseClicked(evt);
            }
        });
        textForSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textForSearchKeyPressed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Programmer", "Submitter" }));
        jField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFieldActionPerformed(evt);
            }
        });

        jTime.setText("Last updated: ");

        javax.swing.GroupLayout addPanel_controlLayout = new javax.swing.GroupLayout(addPanel_control);
        addPanel_control.setLayout(addPanel_controlLayout);
        addPanel_controlLayout.setHorizontalGroup(
            addPanel_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanel_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReload)
                .addGap(35, 35, 35)
                .addComponent(jField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textForSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addPanel_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPanel_controlLayout.createSequentialGroup()
                        .addComponent(jTime)
                        .addGap(266, 266, 266)
                        .addComponent(numOfRecords3))
                    .addGroup(addPanel_controlLayout.createSequentialGroup()
                        .addComponent(numOfRecords1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numOfRecords2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(91, 91, 91))
        );
        addPanel_controlLayout.setVerticalGroup(
            addPanel_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanel_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanel_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numOfRecords1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(addPanel_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnReload)
                        .addComponent(textForSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)
                        .addComponent(jField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(numOfRecords2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(numOfRecords3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTime)
                .addGap(7, 7, 7))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 153)));

        btnUploadChange.setText("Upload Changes");
        btnUploadChange.setMaximumSize(new java.awt.Dimension(95, 30));
        btnUploadChange.setMinimumSize(new java.awt.Dimension(95, 30));
        btnUploadChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadChangeActionPerformed(evt);
            }
        });

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(254, 404));

        tableTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "taskID", "taskNum", "task_title", "step", "description", "instruction", "programmer", "dateAssigned", "Rk", "done?", "dateDone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTasks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableTasks.setMinimumSize(new java.awt.Dimension(10, 240));
        tableTasks.setName(""); // NOI18N
        tableTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableTasksMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableTasksMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTasksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableTasks);

        tabbedPane.addTab("tasks", jScrollPane1);

        tableTask_Files.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "fileID", "taskID", "submitter", "step", "date_", "file", "folder", "notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableTask_Files.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableTask_Files.setMinimumSize(new java.awt.Dimension(10, 240));
        tableTask_Files.setShowGrid(false);
        jScrollPane4.setViewportView(tableTask_Files);

        tabbedPane.addTab("task_files", jScrollPane4);

        tableTask_Notes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "noteID", "taskID", "submitter", "status_notes", "status_date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableTask_Notes.setMaximumSize(new java.awt.Dimension(2147483647, 240));
        tableTask_Notes.setMinimumSize(new java.awt.Dimension(10, 240));
        jScrollPane3.setViewportView(tableTask_Notes);

        tabbedPane.addTab("task_notes", jScrollPane3);

        jLabel2.setText("Edit Mode:");

        btnEditModeSwitch.setText("Switch");
        btnEditModeSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditModeSwitchActionPerformed(evt);
            }
        });

        jLabelEdit.setText("OFF");

        btnCancelEdit.setText("Cancel");
        btnCancelEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelEditActionPerformed(evt);
            }
        });

        btnBatchEdit.setText("Batch Edit");
        btnBatchEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatchEditActionPerformed(evt);
            }
        });

        btnAddRecord.setText("Add Record(s)");
        btnAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRecordActionPerformed(evt);
            }
        });

        btnAddFile.setText("Add File");
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });

        btnAddNote.setText("Add Note");
        btnAddNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelEdit)
                .addGap(18, 18, 18)
                .addComponent(btnEditModeSwitch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddNote)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddRecord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBatchEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUploadChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUploadChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnEditModeSwitch)
                    .addComponent(jLabelEdit)
                    .addComponent(btnCancelEdit)
                    .addComponent(btnBatchEdit)
                    .addComponent(btnAddRecord)
                    .addComponent(btnAddFile)
                    .addComponent(btnAddNote))
                .addContainerGap())
        );

        tabbedPane.getAccessibleContext().setAccessibleName("Reports");
        tabbedPane.getAccessibleContext().setAccessibleParent(tabbedPane);

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));

        text.setBackground(new java.awt.Color(0, 153, 102));
        text.setColumns(20);
        text.setLineWrap(true);
        text.setRows(5);
        text.setText("Please input an SQL statement:\\n>>");
        ((AbstractDocument) text.getDocument())
        .setDocumentFilter(new CreateDocumentFilter(33));
        text.setWrapStyleWord(true);
        text.setMaximumSize(new java.awt.Dimension(1590, 150));
        text.setMinimumSize(new java.awt.Dimension(1590, 150));
        jScrollPane2.setViewportView(text);

        btnEnter.setText("Enter");
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        btnCancelSQL.setText("Cancel");
        btnCancelSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelSQLActionPerformed(evt);
            }
        });

        btnDebugMode.setText("Switch");
        btnDebugMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDebugModeActionPerformed(evt);
            }
        });

        jLabel1.setText("Debug Mode:");

        jLabelDebug.setText("OFF");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDebug)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDebugMode)
                .addGap(58, 58, 58)
                .addComponent(btnEnter)
                .addGap(59, 59, 59)
                .addComponent(btnCancelSQL)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnter)
                    .addComponent(btnCancelSQL)
                    .addComponent(btnDebugMode)
                    .addComponent(jLabel1)
                    .addComponent(jLabelDebug))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        menuItemVersion.setText("Version");
        menuItemVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemVersionActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemVersion);

        jMenu9.setText("Select Connection");

        menuItemAWS.setText("AWS Assignments");
        menuItemAWS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAWSActionPerformed(evt);
            }
        });
        jMenu9.add(menuItemAWS);

        jMenu1.add(jMenu9);

        jMenu8.setText("Print");

        menuItemPrintGUI.setText("Print GUI");
        menuItemPrintGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrintGUIActionPerformed(evt);
            }
        });
        jMenu8.add(menuItemPrintGUI);

        menuItemPrintDisplayWindow.setText("Print Display Window");
        jMenu8.add(menuItemPrintDisplayWindow);

        jMenu1.add(jMenu8);

        menuItemSaveFile.setText("Save File");
        jMenu1.add(menuItemSaveFile);

        menuItemLogOff.setText("Log off");
        menuItemLogOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogOffActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemLogOff);

        menuBar.add(jMenu1);

        jMenu7.setText("Edit");

        menuItemManageDB.setText("Manage databases...");
        menuItemManageDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemManageDBActionPerformed(evt);
            }
        });
        jMenu7.add(menuItemManageDB);

        menuBar.add(jMenu7);

        jMenu3.setText("Find");
        menuBar.add(jMenu3);

        jMenu4.setText("Reports");
        menuBar.add(jMenu4);

        jMenu2.setText("View");

        menuItemLog.setText("Log");
        menuItemLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemLog);

        menuItemSQLCommand.setText("SQL Command");
        jMenu2.add(menuItemSQLCommand);

        menuBar.add(jMenu2);

        jMenu6.setText("Help");
        menuBar.add(jMenu6);

        jMenu5.setText("Other");

        menuItemReportBug.setText("Report a bug/suggestion");
        menuItemReportBug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReportBugActionPerformed(evt);
            }
        });
        jMenu5.add(menuItemReportBug);

        menuBar.add(jMenu5);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addPanel_control, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addPanel_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    
    // Edit the version and date it was created for new archives and jars
    private final String CREATION_DATE = "2015-07-15";
    private final String VERSION = "0.6.0a";
    
    private void menuItemVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemVersionActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Creation Date: "
                + CREATION_DATE + "\n"
                + "Version: " + VERSION);
    }//GEN-LAST:event_menuItemVersionActionPerformed

    
    private void menuItemLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogActionPerformed
        // TODO add your handling code here:
        logwind.showLogWindow();
    }//GEN-LAST:event_menuItemLogActionPerformed

    private void menuItemAWSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAWSActionPerformed
        // TODO add your handling code here:
        System.out.println("Connection");
        // System.out.println(table.getRowCount());
        String sqlT = "select * from tasks";
        connection(sqlT, tableTasks);
        System.out.println("Connection");
        String sqlF = "select * from task_files";
        connection(sqlF, tableTask_Files);
        String sqlN = "select * from task_notes";
        connection(sqlN, tableTask_Notes);
    }//GEN-LAST:event_menuItemAWSActionPerformed

    private void btnUploadChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadChangeActionPerformed
        try {
            // upload two tables separately
            uploadChanges(getSelectedTable());
//        uploadChanges(table2);
        } catch (SQLException ex) {
            Logger.getLogger(ProjectManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadChangeActionPerformed

    public void search(String tableName, JTable table) {

        String field = jField.getSelectedItem().toString();

        // search by filtering table
//        MyTableModel model = new MyTableModel(isFiltering);
//        sorter = new TableRowSorter<MyTableModel>(model);
//        table1 = new JTable(model);
//        table1.setRowSorter(sorter);
//        RowFilter<MyTableModel, Object> rf = null;
//        //If current expression doesn't parse, don't update.
//        try {
//            rf = RowFilter.regexFilter(textForSymbol.getText(), 0);
//        } catch (java.util.regex.PatternSyntaxException e) {
//            return;
//        }
//        sorter1.setRowFilter(rf);
        // search by conducting sql queries
        try {
//            String sqlSearch = "select * from " + tableName + " where (" + field + " REGEXP '[A-Z]*"
//                    + textForSearch.getText().toUpperCase() + "[A-Z]*')  ORDER BY taskID DESC";
            String sqlSearch = "";
            if (field.contains("date")) {
                sqlSearch = "select * from " + tableName + " where " + field + "= '" + textForSearch.getText() + "' ORDER BY taskID DESC";
//            JOptionPane.showMessageDialog(null, sqlSearch);
            } else {
                sqlSearch = "select * from " + tableName + " where  INSTR (" + field + ", '" + textForSearch.getText() + "' ) ORDER BY taskID DESC";
            }
            connection(sqlSearch, table);
            System.out.println("Search successfully.");
            logwind.sendMessages(sqlSearch);
        } catch (Exception ex) {
            System.out.println("Error: " + ex);
            logwind.sendMessages(ex.getMessage());
        }
//        textForSearch.setText("Enter Symbol name");
        tableRowsCount();
    }

    public void uploadChanges(JTable table) throws SQLException {
        
        int i;
        int j;
        int row;
        int col;
        int id;
        boolean flag = false;   // if upload successfully, flag turns to true
        TableState ts = getTableState(table);
        Vector columnNames = ts.getColumnNames();
        String tableName = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());;
        
        // ????? I don't understand how it works.
        for (i = 0; i < changedCell.size(); i = i + 2) {
            id = (int) (changedCell.get(i));
            row = -1;
            col = (int) (changedCell.get(i + 1));
            for (j = 0; j < ts.getRecordsNumber(); j = j + 1) {    // **look for the row cause getValueAt depends current table layout**
                if ((int) table.getValueAt(j, 0) == id) {
                    row = j;
                }
            }
            if (row == -1) {  // cannot find
                JOptionPane.showMessageDialog(null, "id:" + id);
                return;
            }
            table.getValueAt(1, 0);
            try {
                String sqlChange = "UPDATE " + tableName + " SET " + columnNames.get(col)
                        + " = '" + table.getValueAt(row, col) + "' where taskID = " + table.getValueAt(row, 0) + ";";
                System.out.println(sqlChange);
                GUI.stmt.executeUpdate(sqlChange);
//                connection(sqlC, table);
                logwind.sendMessages(sqlChange);
                flag = true;
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Upload failed!");
                logwind.sendMessages(ex.getMessage());
                logwind.sendMessages(ex.getSQLState() + "\n");
                System.out.println("Error: " + ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error!");
                System.out.println("Error: " + ex);
                logwind.sendMessages(ex.getMessage());
            }
        }

        if (flag) {
            changedCell.clear();    // reset the arraylist to record future changes
            setLastUpdateTime();    // update time
            JOptionPane.showMessageDialog(null, "Edits uploaded!");
        }
    }

    /*
     * Open the reoport window and report a bug
     * @param evt
    */
    private void menuItemReportBugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReportBugActionPerformed
        // TODO add your handling code here:
        new ReportWin();
    }//GEN-LAST:event_menuItemReportBugActionPerformed
    
    /*
     * Set the Debug Mode on or off
     * @param evt
    */
    private void btnDebugModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDebugModeActionPerformed

        if (jLabelDebug.getText().equals("OFF")) {
            text.setVisible(true);
            jLabelDebug.setText("ON");
            btnEnter.setVisible(true);
            btnCancelSQL.setVisible(true);
        } else {
            text.setVisible(false);
            jLabelDebug.setText("OFF");
            btnEnter.setVisible(false);
            btnCancelSQL.setVisible(false);
        }
    }//GEN-LAST:event_btnDebugModeActionPerformed

    /*
     * Set the Edit Mode on or off
     * @param evt
    */    
    private void btnEditModeSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditModeSwitchActionPerformed
//        String selectedTab= jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()); 
//        JTable table = tableState.getSelectedTable();
//        Vector data = tableState.getData();
//        Vector columnNames = tableState.getColumnNames();

        if (jLabelEdit.getText().equals("OFF")) {
            jLabelEdit.setText("ON");
            btnUploadChange.setVisible(true);
            btnCancelEdit.setVisible(true);
            btnBatchEdit.setVisible(true);
            isFiltering = false;
//            loadData();
            
//            SwingUtilities.invokeLater(new Runnable(){
//                public void run(){
//                    tableReload(tableTask_Files, task_files.getData(), task_files.getColumnNames());
//                }
//            });
//            SwingUtilities.invokeLater(new Runnable(){
//                public void run(){
//                    tableReload(tableTasks, tasks.getData(), tasks.getColumnNames());
//                }
//            });            
//            SwingUtilities.invokeLater(new Runnable(){
//                public void run(){
//                    tableReload(tableTask_Notes, task_notes.getData(), task_notes.getColumnNames());
//                }
//            });    
            
//            tableReload(tableTasks, tasks.getData(), tasks.getColumnNames()); 
//            tableReload(tableTask_Files, task_files.getData(), task_files.getColumnNames());
//            tableReload(tableTask_Notes, task_notes.getData(), task_notes.getColumnNames());

        } else {
            jLabelEdit.setText("OFF");
            btnUploadChange.setVisible(false);
            btnCancelEdit.setVisible(false);
            btnBatchEdit.setVisible(false);
            isFiltering = true;
//            loadData();
//            tableReload(tableTasks, tasks.getData(), tasks.getColumnNames());
//            tableReload(tableTask_Files, task_files.getData(), task_files.getColumnNames());
//            tableReload(tableTask_Notes, task_notes.getData(), task_notes.getColumnNames());
        }
    }//GEN-LAST:event_btnEditModeSwitchActionPerformed

    private void tableTasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTasksMouseClicked
        // Sorter and Filter
        TableState ts = getTableState();
        TableRowSorter sorter = ts.getSorter();
      
        if (evt.getClickCount() == 2) {
            if (isFiltering == false) {
                clearFilter(sorter, tableTasks);
                tableTasks.setRowSorter(sorter);
                monitorTableChange(-1, tableTasks);
            } else {
                setMyRowFilter(evt, sorter);
//                    JOptionPane.showMessageDialog(null, "1");
                tableTasks.setRowSorter(sorter);
//                    JOptionPane.showMessageDialog(null, "1");
                int index_symbol = tableTasks.getColumnModel()
                        .getColumnIndex("Symbol");
                JOptionPane.showMessageDialog(null, "2");
                monitorTableChange(index_symbol + 1, tableTasks);
                JOptionPane.showMessageDialog(null, isFiltering);
                // System.out.println("double clicked");
            }
        }
    }//GEN-LAST:event_tableTasksMouseClicked

    private void btnCancelEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelEditActionPerformed

//        tableState.setData(jTabbedPane1.getName().toString(), new Vector());   // vanish former changes to the table
        loadData();

    }//GEN-LAST:event_btnCancelEditActionPerformed

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        TableState ts = getTableState();
        String[] field = ts.getSearchFields();

        if (field == null) {
            jField.setModel(new DefaultComboBoxModel(new String[]{"taskID", "task_title"}));
        } else {
            jField.setModel(new DefaultComboBoxModel(field));
        }

        tableRowsCount();

        changedCell.clear();    // when selected table changed, clear former edit history
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void btnBatchEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatchEditActionPerformed

        TableEditor tableEditor = new TableEditor(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()), this);
        tableEditor.setVisible(true);

    }//GEN-LAST:event_btnBatchEditActionPerformed

    private void menuItemManageDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemManageDBActionPerformed
        new EditDatabaseList().setVisible(true);
    }//GEN-LAST:event_menuItemManageDBActionPerformed

    private void btnAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRecordActionPerformed
        new AddRecords(this, logwind).setVisible(true);
    }//GEN-LAST:event_btnAddRecordActionPerformed

    private void menuItemLogOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogOffActionPerformed
        Object[] options = {"Reconnect", "Quit"};  // the titles of buttons

        int n = JOptionPane.showOptionDialog(null, "Would you like to reconnect?", "Log off",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title

        switch (n) {
            case 0: {               // Reconnect
                new LoginWindow(this).setVisible(true);
                break;
            }
            case 1:
                System.exit(1); // Quit
        }
    }//GEN-LAST:event_menuItemLogOffActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String selectedTab = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());
        JTable selectedTable = getSelectedTable();

        search(selectedTab, selectedTable);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void textForSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textForSearchKeyPressed
        String selectedTab = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());
        JTable selectedTable = getSelectedTable();

        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            search(selectedTab, selectedTable);
        }
    }//GEN-LAST:event_textForSearchKeyPressed

    private void textForSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textForSearchMouseClicked
        // TODO add your handling code here:
        textForSearch.setText(null);
    }//GEN-LAST:event_textForSearchMouseClicked

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed

        loadData();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void jFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFieldActionPerformed

    private void btnAddNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNoteActionPerformed

        if (tableTasks.getSelectedRow() != -1) {
            Integer selectedTask = (Integer) tableTasks.getModel()
                    .getValueAt(tableTasks.getSelectedRow(), 0); // Add Note to selected taskID 
            new AddNote(this, logwind, selectedTask).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please, select one task!");
        }
        // Add Note to selected taskID
    }//GEN-LAST:event_btnAddNoteActionPerformed

    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed
        if (tableTasks.getSelectedRow() != -1) {
            Integer selectedTask = (Integer) tableTasks.getModel()
                    .getValueAt(tableTasks.getSelectedRow(), 0);// Add File to selected taskID 

            new AddFile(this, logwind, selectedTask).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please, select one task!");
        }
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void tableTasksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTasksMousePressed
        tableTasks.getToolTipText(evt);// TODO add your handling code here:
    }//GEN-LAST:event_tableTasksMousePressed

    private void tableTasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTasksMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tableTasksMouseReleased

    private void menuItemPrintGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPrintGUIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuItemPrintGUIActionPerformed

    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        // TODO add your handling code here:
        if (enterButton.isCreateTable(text)) {
            connection(enterButton.getCommand(text), tableTasks);
        } else {
            ExecuteSQLStatement.updateDatabase(GUI.con,
                enterButton.getCommand(text));
        }
    }//GEN-LAST:event_btnEnterActionPerformed

    private void btnCancelSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelSQLActionPerformed
        // TODO add your handling code here:
        ((AbstractDocument) text.getDocument())
        .setDocumentFilter(new CreateDocumentFilter(0));
        text.setText("Please input an SQL statement:\n>>");
        ((AbstractDocument) text.getDocument())
        .setDocumentFilter(new CreateDocumentFilter(33));
    }//GEN-LAST:event_btnCancelSQLActionPerformed
    
    //has a problem of the name of the method (tableChanged); it call the same name of text in the class 
    private void jTableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int col = e.getColumn();
//        TableModel model = (TableModel)e.getSource();
//        String columnName = model.getColumnName(column);
//        Object data = model.getValueAt(row, column);

        changedCell.add(row);
        changedCell.add(col);
//        JOptionPane.showMessageDialog(null, "OK");
    }

    public void tableRowsCount() {
        String selectedTab = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());;
        TableState ts = getTableState();
        int rows = ts.getRowsNumber();      // number of rows
        int num = ts.getRecordsNumber();    // number of records

        if (GUI.status == true) {   // already logged in check
            numOfRecords1.setText("N of records in " + selectedTab + ": " + num);
            numOfRecords2.setText("N of records shown: " + rows);
            numOfRecords3.setText("");

        }
    }

    public void clearFilter(TableRowSorter rowSorter, JTable table) {
        try {
            RowFilter rf;
            int rowIndex = table.getSelectedRow();
            int columnIndex = table.getColumnModel().getColumnIndex(
                    "filecode");
            String str = (String) table.getValueAt(rowIndex,
                    columnIndex);

            rf = RowFilter.regexFilter("^" + str);
            rowSorter.setRowFilter(rf);

        } catch (Exception ex) {

        }
    }

    public void setMyRowFilter(MouseEvent e, TableRowSorter rowSorter) {
        try {
            RowFilter rf;
            int rowIndex = tableTasks.getSelectedRow();
            int columnIndex = tableTasks.getColumnModel().getColumnIndex(
                    "Symbol");
            String[] lst = ((String) tableTasks.getValueAt(rowIndex,
                    columnIndex)).split(" ");

            rf = RowFilter.regexFilter("^" + lst[0]);
            rowSorter.setRowFilter(rf);

        } catch (Exception ex) {

        }
    }

    public void connection(String sql, JTable table) {
        
        Vector data = new Vector();
        Vector columnNames = new Vector();
        TableState ts = getTableState(table);
        int columns = 0;

        System.out.println(sql);

        if (GUI.status == false) {
            JOptionPane.showMessageDialog(null, "You have not yet logged in.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
            new LoginWindow().setVisible(true);
//            System.exit(1);
        }

        ResultSet rs = null;
        ResultSetMetaData metaData = null;
        try {
            rs = GUI.stmt.executeQuery(sql);
            metaData = rs.getMetaData();
        } catch (Exception ex) {
            System.out.println("Error: " + ex);
        }
        try {
            columns = metaData.getColumnCount();
            for (int i = 1; i <= columns; i++) {
                columnNames.addElement(metaData.getColumnName(i));
            }
            while (rs.next()) {
                Vector row = new Vector(columns);
                for (int i = 1; i <= columns; i++) {
                    row.addElement(rs.getObject(i));
                }
                data.addElement(row);
            }
            rs.close();
            //stmt.close();
        } catch (SQLException ex) {
            logwind.sendMessages(ex.getMessage());
            logwind.sendMessages(ex.getSQLState() + "\n");
            System.out.println("Error: " + ex);
        } catch (Exception ex) {
            System.out.println("Error: " + ex);
            logwind.sendMessages(ex.getMessage());
        }

        tableReload(table, data, columnNames);  // Table model (table visualization) set up

        System.out.println("table added successfully");

        ts.setRowsNumber(data.size());   // update number of rows displayed
    }

    public void loadData() {
        System.out.println("Connection");
        String sqlT = "select * from tasks ORDER BY taskID DESC";       
        connection(sqlT, tableTasks);
        
        // Set the column Width percentage of the the first table--Tasks
        // Sum 89%
        // Change the name 
        float[] columnWidthOfTableTasks = {4.0f, 5.0f, 13.0f, 3.5f, 20.0f, 20.0f, 6.5f, 7.0f, 2.0f, 4.0f, 7.0f};
        
        setColumnFormat(columnWidthOfTableTasks, tableTasks);
        setToolTipText(tableTasks, 11); //Shows tooltip for columns which text are bigger than width
        tasks.init(tableTasks, new String[]{"programmer", "date_assigned", "completed", "priority"});
        numOfRecords1.setText("N of records in tasks:" + tasks.getRowsNumber());

        System.out.println("Connection");
        String sqlF = "select * from task_files ORDER BY taskID DESC";
        connection(sqlF, tableTask_Files);
        
        // Set the column Width percentage of the the first table--Task_Files
        // Sum 85%
        // Change the name 
        float[] columnWidthOfTableTaskFiles = {4.0f, 4.0f, 6.0f, 3.5f, 7.0f, 20.0f, 20.0f, 20.5f};
        
        setColumnFormat(columnWidthOfTableTaskFiles, tableTask_Files);
        setToolTipText(tableTask_Files, 8);
        task_files.init(tableTask_Files, new String[]{"submitter"});
        numOfRecords2.setText("N of records in task_files: " + task_files.getRowsNumber());

        System.out.println("Connection");
        String sqlN = "select * from task_notes ORDER BY taskID DESC";
        connection(sqlN, tableTask_Notes);
        
        // Set the column Width percentage of the the first table--Task_Notes
        // Sum 71%
        // Change the name 
        float[] columnWidthOfTableTaskNotes = {4.0f, 4.0f, 6.0f, 50.0f, 7.0f};
        
        setColumnFormat(columnWidthOfTableTaskNotes, tableTask_Notes);
        setToolTipText(tableTask_Notes, 5);
        task_notes.init(tableTask_Notes, new String[]{"submitter"});
        numOfRecords3.setText("N of records in task_notes: " + task_notes.getRowsNumber());

    }

    public void tableReload(JTable table, Vector data, Vector columnNames) {
        
        // After logging in, isFiltering is true. And set the model default.
        MyTableModel model = new MyTableModel(data, columnNames, isFiltering);
        TableRowSorter sorter = new TableRowSorter<MyTableModel>(model);
        model.addTableModelListener(new TableModelListener() {  // add table model listener every time the table model reloaded
            @Override
            public void tableChanged(TableModelEvent e) {
                jTableChanged(e);
            }
        });

        table.setModel(model);
        table.setRowSorter(sorter);       
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        TableCellRenderer rendererFromHeader = table.getTableHeader().getDefaultRenderer();
        
        // ???????????I don't understand what it is going to do.
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        
    }

     private void setColumnFormat(float[] width, JTable table) {
        // Center column content
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        //Center column header

        JTableHeader header = table.getTableHeader();
        header.setDefaultRenderer(new AlignmentTableHeaderCellRenderer(header.getDefaultRenderer()));

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int tW = screenSize.width;
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i = 0; i < width.length; i++) {
            int pWidth = Math.round((width[i] / 100) * tW);
            table.getColumnModel().getColumn(i).setPreferredWidth(pWidth);
            
            // Test to fix the width of columns
            //table.getColumnModel().getColumn(i).setMinWidth(pWidth);
            //table.getColumnModel().getColumn(i).setMaxWidth(pWidth);
            
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            
        }
        table.setMinimumSize(new Dimension(1000, 300));
        table.setPreferredScrollableViewportSize(new Dimension(1000, 300));
              
    }

    class AlignmentTableHeaderCellRenderer implements TableCellRenderer {
 
        private final TableCellRenderer wrappedRenderer;
        private final JLabel label;

        public AlignmentTableHeaderCellRenderer(TableCellRenderer wrappedRenderer) {
            if (!(wrappedRenderer instanceof JLabel)) {
                throw new IllegalArgumentException("The supplied renderer must inherit from JLabel");
            }
            this.wrappedRenderer = wrappedRenderer;
            this.label = (JLabel) wrappedRenderer;
        }

           @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
            wrappedRenderer.getTableCellRendererComponent(table, value,
                  isSelected, hasFocus, row, column);
            label.setHorizontalAlignment(column == table.getColumnCount()-1 ? JLabel.LEFT : JLabel.CENTER);
            return label;
        }
    }

    private void setToolTipText(JTable table, int columnCount) {

        for (int i = 0; i < columnCount; i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(new PathCellRenderer());
        }

    }

    class PathCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            JLabel c = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            String text;
            if (value != null) {
                
                text = value.toString();
                
                c.setToolTipText(text);
            }
            return c;
        }
    }

    // Keep the float in Table Editor by separating editing part out here
    public void batchEdit(TableEditor editor) {
        int row[];
        int col = 1;
        int i;
        int j;
        int num;
        
        TableState ts = getTableState();
        JTable table = getSelectedTable();   // current table
        Vector data = ts.getData();
        
        // used for updating the vector
        Vector newRow = new Vector();
        Vector temp1 = new Vector();
        Vector temp2 = new Vector();   
        
        String oldString;
        String newString;
        String columnName;

        newString = editor.newString;
        row = table.getSelectedRows();
        num = table.getSelectedRowCount();
        columnName = editor.category;
        
        for (i = 0; i < 30; i++) {
            if (columnName.equals(table.getColumnName(i))) {
                col = i;
                break;
            }
        }

        if (i <= 29) {    // the last for loop works fine with a break
            for (i = 0; i <= num - 1; i++) {
                temp1 = (Vector) data.get(row[i]);   // retrieve elements in a row of the (Vector) data
                for (j = 0; j <= table.getColumnCount() - 1; j++) {
                    newRow.add(temp1.get(j));
                }
//                oldString = table.getValueAt(row[i], col).toString();
                table.setValueAt(newString, row[i], col);
                newRow.set(col, newString);
                temp2.add(newRow);      // insert all elements into a new 2d vector temp2
                data.set(row[i], newRow);
                newRow = new Vector();  // vanish former storage
                temp1 = new Vector();
                temp2 = new Vector();
//                JOptionPane.showMessageDialog(null, data.get(row[i]));
            }

            ts.setData(data);

        } else {
            JOptionPane.showMessageDialog(null, "Editing failed.");
        }

    }

    public static void monitorTableChange(int columnIndex, JTable table) {
        int numOfRow = table.getRowCount();

        JViewport view = new JViewport();
//        JTable jt = new CreateTables(numOfRow).table;
//        view.setView(jt);
//        view.setPreferredSize(jt.getPreferredSize());
//        table.scrollPane.setRowHeader(view);
        if (columnIndex != -1) {
            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
            cellRenderer.setBackground(Color.GREEN);
            cellRenderer.setHorizontalAlignment(JLabel.CENTER);

            // cellRenderer.setBorder(BorderFactory.createMatteBorder(10, 10,
            // 10, 10, Color.BLACK));
            table.getColumnModel().getColumn(columnIndex - 1)
                    .setHeaderRenderer(cellRenderer);
            isFiltering = true;

        } else {
//            for (int i = 1; i < table.getModel().getColumnCount(); i++) {
//                    table.getColumnModel().getColumn(i - 1)
//                                    .setHeaderRenderer(new HeaderRenderer(table.table));
//            }
            isFiltering = false;
        }

        // c.revalidate();
    }

    public JTable getSelectedTable() {
        String selectedTab = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());;
        if (selectedTab.equals("tasks")) {
            return tableTasks;
        } else if (selectedTab.equals("task_files")) {
            return tableTask_Files;
        } else if (selectedTab.equals("task_notes")) {
            return tableTask_Notes;
        } else {
            JOptionPane.showMessageDialog(null, "TableSelected not found!");
            return null;
        }

    }

    public TableState getTableState() {                 // get TableState by selected Tab
        String selectedTab = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());

        //  A switch works with the byte, short, char, and int primitive data types.
        switch (selectedTab) {
            case "tasks":
                return tasks;
            case "task_files":
                return task_files;
            case "task_notes":
                return task_notes;
            default:
                return null;
        }

//        if (selectedTab.equals("Assignments")) {
//            return assignments;
//        } else {
//            return reports;
//        }
    }

    public TableState getTableState(JTable table) {     // get TableState by jTable object

        if (table == tableTasks) {
            return tasks;
        } else if (table == tableTask_Files) {
            return task_files;
        } else if (table == tableTask_Notes) {
            return task_notes;
        } else {
            JOptionPane.showMessageDialog(null, "TableState not found!");
            return null;
        }

    }

    public void setLastUpdateTime() throws SQLException {
//        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//
//        String sqldate = "SELECT UPDATE_TIME FROM  INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME ='" + tableName + "';";
//        ResultSet rs = null;
//        ResultSetMetaData metaData = null;
        String timeStamp = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss").format(Calendar.getInstance().getTime());
//        try {
//            rs = GUI.stmt.executeQuery(sqldate);
//        } catch (Exception ex) {
//            System.out.println("Error: " + ex);
//        }
        System.out.println(timeStamp);

        jTime.setText("Last updated: " + timeStamp);
    }

    public String[] getColumnNames(int number) {
        JTable table = tableTasks;  // use this method cause table1 and table2 are private
        switch (number) {
            case 1:
                table = tableTasks;
                break;
            case 2:
                table = tableTask_Files;
                break;
            case 3:
                table = tableTask_Notes;
                break;

        }
        ArrayList<String> col = new ArrayList<String>();
        int i, num = table.getColumnCount();

        for (i = 1; i < num; i++) { // start from 1 to eliminate the ID column
            col.add(table.getColumnName(i));
        }

        String[] columnNames = col.toArray(new String[col.size()]);
        return columnNames;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addPanel_control;
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnAddNote;
    private javax.swing.JButton btnAddRecord;
    private javax.swing.JButton btnBatchEdit;
    private javax.swing.JButton btnCancelEdit;
    private javax.swing.JButton btnCancelSQL;
    private javax.swing.JButton btnDebugMode;
    private javax.swing.JButton btnEditModeSwitch;
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUploadChange;
    private javax.swing.JComboBox jField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDebug;
    private javax.swing.JLabel jLabelEdit;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel jTime;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemAWS;
    private javax.swing.JMenuItem menuItemLog;
    private javax.swing.JMenuItem menuItemLogOff;
    private javax.swing.JMenuItem menuItemManageDB;
    private javax.swing.JMenuItem menuItemPrintDisplayWindow;
    private javax.swing.JMenuItem menuItemPrintGUI;
    private javax.swing.JMenuItem menuItemReportBug;
    private javax.swing.JMenuItem menuItemSQLCommand;
    private javax.swing.JMenuItem menuItemSaveFile;
    private javax.swing.JMenuItem menuItemVersion;
    private javax.swing.JLabel numOfRecords1;
    private javax.swing.JLabel numOfRecords2;
    private javax.swing.JLabel numOfRecords3;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tableTask_Files;
    private javax.swing.JTable tableTask_Notes;
    private javax.swing.JTable tableTasks;
    private javax.swing.JTextArea text;
    private javax.swing.JTextField textForSearch;
    // End of variables declaration//GEN-END:variables

//declaration for table 3 Project Manager//
}





class MyTableModel extends DefaultTableModel {

    boolean isFiltering;

    public MyTableModel(Object rowData[][], Object columnNames[], boolean filteringStatus) {
        super(rowData, columnNames);
        isFiltering = filteringStatus;
    }

    public MyTableModel(Vector data, Vector columnNames, boolean filteringStatus) {
        
        // Set the default table model to establish a table to store the data.
        super(data, columnNames);
        isFiltering = filteringStatus;
    }

//    public MyTableModel(Vector data, boolean filteringStatus) {
//        isFiltering = filteringStatus;
//    }
    public MyTableModel(boolean filteringStatus) {
        isFiltering = filteringStatus;
    }

    @Override
    public Class getColumnClass(int col) {
        /*if (col == 0 || col == 2) // second column accepts only Integer values
         return Integer.class;
         else if (col == 3 || col == 5)
         return SimpleDateFormat.class;
         else
         return String.class; // other columns accept String values
         */
        if (col == 0) {
            return Integer.class;
        } else {
            return Object.class;
        }
    }

    @Override
    public boolean isCellEditable(int row, int col) {
//        JOptionPane.showMessageDialog(null, isFiltering);
        if (col == 0) // first column will be uneditable
        {
            return false;
        } else if (isFiltering == true) // when edit mode is off
        {
            return false;
        } else {
            return true;
        }
    }

//    @Override
//    public void setValueAt(Object value, int row, int col) {
//        data[row][col] = ((Integer) value).intValue();   // originalBoard: name of array
//        System.out.println("Setting value");
//        fireTableCellUpdated(row, col);
//  // return true;
//    }
//        public void setCellEditable(int row, int col, boolean value) {
//            this. editable_cells[row][col] = value; // set cell true/false
//            this. fireTableCellUpdated(row, col);
//        }
}
